library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;

-----------------------------------------------
---------- ALU 5-bit VHDL ---------------------
-----------------------------------------------
entity ALU is
  
    Port (
--clock
Clk : in std_logic;
--inputs
    A, B     : in std_logic_vector (3 downto 0);                 -- 2 inputs 4-bit
    ALU_Sel  : in std_logic_vector (3 downto 0);                 -- 1 input 4-bit for selecting function
--outputs
    ALU_Out_Arithmatic   : out  std_logic_vector (4 downto 0);   -- Arithmatic output 5-bit 
    ALU_Out_Logical      : out  std_logic_vector (3 downto 0)    -- Logical output 4-bit 
);

end ALU; 

architecture Behavioral of ALU is

signal ALU_Result_Arithmatic : std_logic_vector (4 downto 0);
signal ALU_Result_Logical : std_logic_vector (3 downto 0);
signal TEMP_A :std_logic_vector (4 downto 0);
signal TEMP_B :std_logic_vector (4 downto 0);
signal TEMP_AA: std_logic_vector(3 downto 0);
signal TEMP_BB: std_logic_vector(3 downto 0);


begin

-- Concurrent Statements

TEMP_A<= ('0' & ((not A)+1)) when A(3)='1' else ('0' & A ) ;
TEMP_B<= ('0' & ((not B)+1)) when B(3)='1' else ('0' & B ) ;
TEMP_AA<=((not A)+1) when A(3)='1' else ( A ) ;
TEMP_BB<=  ((not B)+1) when B(3)='1' else (B ) ;
ALU_Out_Arithmatic <=  ALU_Result_Arithmatic;
ALU_Out_Logical <=  ALU_Result_Logical;

-- Process 


process(Clk)
begin
if(rising_edge(Clk)) then      --calculations at the positive edge of clock cycle.

--process(A,B,ALU_Sel)         -- comment this if you will
-- begin                       -- use the clock
  case(ALU_Sel) is    

-- Arithmatic operations

  when "0000" => -- increment A
   ALU_Result_Arithmatic <= TEMP_A + 1 ; 
  when "0001" => -- decrement A
   ALU_Result_Arithmatic <= TEMP_A - 1 ;
  when "0010" => -- transfer B
   ALU_Result_Arithmatic <= TEMP_B;
  when "0011" => -- increment B
   ALU_Result_Arithmatic <= TEMP_B + 1 ;
  when "0100" => --Decrement B
   ALU_Result_Arithmatic <= TEMP_B - 1;
  when "0101" => -- Transfer A
   ALU_Result_Arithmatic <= TEMP_A;
  when "0110" => --  ADDition
   ALU_Result_Arithmatic <= TEMP_A + TEMP_B ; 
when "0111" => -- A*2
   ALU_Result_Arithmatic <= (TEMP_A(2) & TEMP_A(1) & TEMP_A(0) & '0' & '0');

-- Logical operations

  when "1000" => -- Not A 
   ALU_Result_Logical <= not TEMP_AA ;
  when "1001" => -- Not B
   ALU_Result_Logical <= not TEMP_BB;
  when "1010" => -- Logical AND 
   ALU_Result_Logical <= TEMP_AA and TEMP_BB;
  when "1011" => -- Logical or
   ALU_Result_Logical <= TEMP_AA or TEMP_BB;
  when "1100" => -- Logical xor 
   ALU_Result_Logical <= TEMP_AA xor TEMP_BB;
  when "1101" => -- Logical xnor
   ALU_Result_Logical <= TEMP_AA xnor TEMP_BB;
  when "1110" => -- NAND
   ALU_Result_Logical <= TEMP_AA nand TEMP_BB;
  when "1111" => -- NOR   
   ALU_Result_Logical <= TEMP_AA nor TEMP_BB;
  when others =>
   --NULL;
  end case;
end if;               --comment this if you will NOT use clock
end process;
end Behavioral;
