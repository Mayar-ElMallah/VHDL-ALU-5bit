library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;
use IEEE.numeric_std.all;

-----------------------------------------------
---------- ALU 5-bit VHDL ---------------------
-----------------------------------------------
entity ALU is
  
    Port (
--inputs
    A, B     : in std_logic_vector (3 downto 0);                 -- 2 inputs 4-bit
    ALU_Sel  : in std_logic_vector (3 downto 0);                 -- 1 input 4-bit for selecting function
--outputs
    ALU_Out_Arithmatic   : out  signed (4 downto 0);   -- Arithmatic output 5-bit 
    ALU_Out_Logical      : out  signed (3 downto 0)    -- Logical output 4-bit 
);

end ALU; 

architecture Behavioral of ALU is

signal ALU_Result_Arithmatic : signed (4 downto 0);
signal ALU_Result_Logical : signed (3 downto 0);
signal TEMP_A :signed (4 downto 0);
signal TEMP_B :signed (4 downto 0);
begin
   process(A,B,ALU_Sel)
 begin
if  (A(3)='1') then
TEMP_A<= ('1' & signed(A));
else 
TEMP_A<= ('0' & signed(A));
end if;
if( B(3)='1') then
TEMP_B<= ('1' & signed(B));
else 
TEMP_B<= ('0' & signed(B));
end if;
  case(ALU_Sel) is

-- Arithmatic operations

  when "0000" => -- increment A
   ALU_Result_Arithmatic <= TEMP_A + 1 ; 
  when "0001" => -- decrement A
   ALU_Result_Arithmatic <= TEMP_A - 1 ;
  when "0010" => -- transfer B
   ALU_Result_Arithmatic <= TEMP_B;
  when "0011" => -- increment B
   ALU_Result_Arithmatic <= TEMP_B+1 ;
  when "0100" => --Decrement B
   ALU_Result_Arithmatic <= TEMP_B-1;
  when "0101" => -- Transfer A
   ALU_Result_Arithmatic <= TEMP_A;
  when "0110" => --  ADDition
   ALU_Result_Arithmatic <= TEMP_A +TEMP_B ; 
  when "0111" => -- A*2
   ALU_Result_Arithmatic <= shift_left(TEMP_A,1);

-- Logical operations

  when "1000" => -- Not A 
   ALU_Result_Logical <= not signed(A) ;
  when "1001" => -- Not B
   ALU_Result_Logical <= not signed(B);
  when "1010" => -- Logical AND 
   ALU_Result_Logical <= signed(A) and signed(B);
  when "1011" => -- Logical or
   ALU_Result_Logical <= signed(A) or signed( B);
  when "1100" => -- Logical xor 
   ALU_Result_Logical <= signed(A) xor signed(B);
  when "1101" => -- Logical xnor
   ALU_Result_Logical <= signed(A) xnor signed(B);
  when "1110" => -- NAND
   ALU_Result_Logical <= signed(A) nand signed(B);
  when "1111" => -- NOR   
   ALU_Result_Logical <= signed(A) nor signed(B);
  when others =>
   NULL;
  end case;
 end process;
 ALU_Out_Arithmatic <=  ALU_Result_Arithmatic;
 ALU_Out_Logical <=  ALU_Result_Logical;

end Behavioral;
